// Code generated by rpcgen; DO NOT EDIT.
//
// Source: api/api.go
// Template: templates/instrumentation.go.tmpl

package api

type instrumentingMiddleware struct {
	requestCount   metrics.Counter
	requestLatency metrics.TimeHistogram
	errorCount     metrics.Counter
	l              *logrus.Logger
	a              API
}

// NewInstrumentingMiddleware returns a new instance of instrumentingMiddleware.
func NewInstrumentingMiddleware(a API, client *statsd.Client, log *logrus.Logger) API {
	requestCount := dogstatsd.NewCounter("request_count", 1, client, log)
	requestLatency := dogstatsd.NewTimeHistogram("request_latency", 1, client, log)
	errorCount := dogstatsd.NewCounter("error_count", 1, client, log)
	return &instrumentingMiddleware{
		requestCount:   requestCount,
		requestLatency: requestLatency,
		errorCount:     errorCount,
		l:              log,
		a:              a,
	}
}

{{range .Endpoints}}
func (im *instrumentingMiddleware) {{.Name}}(ctx context.Context, req {{.Name}}Request) (*{{.Name}}Response, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: "{{.Name}}"}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).Add(1)
		im.requestLatency.With(methodTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.a.{{.Name}}(ctx, req)
	return response, err
}
{{end}}
